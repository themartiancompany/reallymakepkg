#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_globals() {
  set \
    -e \
    -u
  shopt \
    -s \
      extglob
  
  # Control the environment
  umask \
    0022
  export \
    LC_ALL="C.UTF-8"
  # LC_ALL=C.UTF-8, unlike LC_ALL=C,
  # does not override LANGUAGE.
  # See 
  # https://sourceware.org/bugzilla/show_bug.cgi?id=16621
  # and 
  # https://savannah.gnu.org/bugs/?62815
  [[ -v LANGUAGE ]] && \
    unset \
      LANGUAGE
  [[ -v SOURCE_DATE_EPOCH ]] || \
    printf \
      -v SOURCE_DATE_EPOCH \
      '%(%s)T' -1
  export \
    SOURCE_DATE_EPOCH
  
  # Get script path
  _path="$( \
    export \
      _OLDPWD="$(pwd)" && \
    cd \
      "$( \
	dirname \
          "${BASH_SOURCE[0]}")" && \
    echo \
      "$(pwd)" && \
    cd \
      "${_OLDPWD}" && \
    unset \
      _OLDPWD)"
  unset \
    _OLDPWD

  # Set application name from the script's file name
  app_name="${0##*/}"
}

_global_variables() {
  [[ -v LDFLAGS ]] || \
    LDFLAGS=""
  [[ -v CFLAGS ]] || \
   CFLAGS=""
  [[ -v CXXFLAGS ]] || \
   CXXFLAGS=""
termux_glibc=""
  quiet=""
}

# Show a WARNING message
# $1: message string
_msg_warning() {
  local \
    _msg="${1}"
  printf \
    '[%s] WARNING: %s\n' \
    "${app_name}" \
    "${_msg}" >&2
}

# Show an ERROR message then exit with status
# $1: message string
# $2: exit code number (with 0 does not exit)
_msg_error() {
  local \
    _msg="${1}" \
    _error=${2}
  printf \
    '[%s] ERROR: %s\n' \
    "${app_name}" \
    "${_msg}" >&2
  if (( _error > 0 )); then
    exit "${_error}"
  fi
}

# Sets object string attributes
# $1: object
# $2: an object string attribute
# $3: a value
_set() {
  local \
    _obj="${1}" \
    _var="${2}" \
    _value="${3}" \
    _type
  printf \
    -v "${_obj}_${_var}" \
    "${_value}"
}

# Returns an attribute value for a 
# given object
# $1: an object
# $2: an object attribute
_get() {
  local \
    _obj="${1}" \
    _var="${2}" \
    _msg \
    _ref \
    _type
  _ref="${_obj}_${_var}[@]"
  _type="$( \
    declare \
      -p "${_obj}_${_var}")"
  [[ "${_type}" == *"declare: "*": not found" ]] && \
    _msg=(
      "Attribute '${_var}' is not defined"
      "for object '${_obj}'") && \
    _msg_error \
      "${_msg[*]}" \
      1
  [[ "${_type}" == "declare -A "* ]] && \
    echo \
      "${_image[${_var}]}" && \
    return
  printf \
    "%s\n" \
    "${!_ref}"
}

# System-independent makepkg
_reallymakepkg() {
  local \
    _args=()
  _args=(
    "$@")
  [[ -n "${TERMUX_VERSION}" ]] && \
    _termux_makepkg \
      "${_args[@]}" && \
    return
  makepkg \
    "${_args[@]}"
}

# Apply useful hopefully globally innocuous flags
_flags() {
  local \
    _coreutils_flags=()
  [[ -v gl_cv_host_operating_system ]] || \
    _coreutils_flags+=(
      gl_cv_host_operating_system="$( \
        uname \
	  -o)"
    )
  export \
    "${_coreutils_flags[@]}"
}

_get_cc() {
  command \
    -v \
    "$( \
      stat \
       -c="%N" \
       "$( \
         command \
           -v \
           "cc")" | \
       awk \
         '{print $3}')"
}

_get_usr() {
  dirname \
    "$( \
      dirname \
        "$( \
	  _get_cc)")"
}

# Set C flags for the termux environment
_termux_flags() {
  local \
    _cc="" \
    _cflags=() \
    _err_flags=() \
    _glib_flags=() \
    _glibc_flags=() \
    _glibc_flag=true \
    _ldflags=() \
    _err \
    _usr
  _cc="$( \
    _get_cc)"
  _usr="$( \
    _get_usr)"
  _err_prefix="-Wno-"
  [[ "${_cc}" == *"gcc" ]] && \
    _err_prefix="${_err_prefix}error-"
  _err_flags=(
    "implicit-function-declaration"
    "language-extension-token"
    # "incompatible-pointer-types"
    # "overflow"
  )
  for _err \
    in "${_err_flags[@]}"; do
    _cflags+=(
      "${_err_prefix}${_err}"
    )
  done
  _cflags+=(
    -I"${_usr}/include/libelf.h"
  )
  _glibc_flags=(
    -I"${_usr}/glibc/include/epoll.h"
  )
  [[ "$(_get \
	  "termux" \
	  "glibc")" == "false" ]] && \
    _ldflags+=(
      -landroid-shmem
      -landroid-execinfo
      -landroid-support
      -landroid-posix-semaphore
      -landroid-sysv-semaphore
    )
  [[ "$(_get \
	  "termux" \
	  "glibc")" == "true" ]] && \
    _ldflags+=(
      -L"${_usr}/glibc/lib/libc.a"
      -L"${_usr}/glibc/lib"
    ) && \
    _cflags+=(
      ${_glibc_flags[@]}
    )
  _ldflags+=(
    -lelf
  )
  _glib_flags=(
    -D__BIONIC__=1
    "-I${_usr}/include/glib-2.0"
    "-I${_usr}/lib/glib-2.0/include"
    "-I${_usr}/include"
  )
  for _flag \
    in "${_ldflags[*]}"; do
    if \
      [[ \
        ! " ${LDFLAGS} " =~ \
          "${_flag}" ]]; then
      export \
        LDFLAGS="${LDFLAGS} ${_flag}"
    fi 
  done
  export \
    CFLAGS="${_glib_flags[*]} ${_cflags[*]} ${CFLAGS}"
    CXXFLAGS="${_glib_flags[*]} ${_cflags[*]} ${CXXFLAGS}"
  _msg_info \
    "CFLAGS: ${CFLAGS}"
}

# Roughly determine if a package contains a Python package
_is_python_pkg() {
  local \
    _pkgname=() \
    _provides=() \
    _pkg
  _flag=""
  _pkgname=(
    $(source \
        "${_tmpdir}/PKGBUILD" && \
      echo \
        "${pkgname[@]}"))
  for _pkg \
    in "${_pkgname[@]}"; do
    if [[ "${_pkg}" == "python"*"-"* ]]; then
      _flag=true
      break
    fi
  done
  _provides=(
    $(source \
        "${_tmpdir}/PKGBUILD" && \
      echo \
        "${provides[@]}"))
  for _pkg \
    in "${_provides[@]}"; do
    if [[ "${_pkg}" == "python"*"-"* ]]; then
      _flag=true
      break
    fi
  done
}

_is_setuptools_pkg() {
  local \
    _pkgname=() \
    _it_flag \
    _py2_flag
  _pkgname=(
    $(source \
        "${_tmpdir}/PKGBUILD" && \
      echo \
        "${pkgname[@]}"))
  _flag="$( \
    cat \
      "${_tmpdir}/PKGBUILD" | \
      grep \
        -o \
	'setup.py')"
  _py2_flag="$( \
    echo \
      " ${_pkgname[*]} " | \
      grep \
        " python2-" )"
  _it_flag="$( \
    echo \
      " ${_pkgname[*]} " | \
      grep \
        " python-setuptools" )"
  if \
    [[ "${_py2_flag}" != "" ]]; then
    _flag=""
  fi
  if \
    [[ "${_it_flag}" != "" ]]; then
    _flag=""
  fi
}

_is_build_pkg() {
  local \
    _makedepends=() \
    _pkg \
    _pkgname \
    _flag=""
  _makedepends=(
    $(source \
        "${_tmpdir}/PKGBUILD" && \
      echo \
        "${makedepends[@]}")
  )
  _pkgname=(
    $(source \
        "${_tmpdir}/PKGBUILD" && \
      echo \
        "${pkgname[@]}"))
 for _pkg \
    in "${_makedepends[@]}"; do
    if [[ "${_pkg}" == "python-build" ]]; then
      _flag="true"
      break
    fi
    if \
      [[ "${_pkg}" == "python-setuptools-scm" ]] && \
      [[ " ${_pkgname[*]} " != *" python-jaraco.context "* ]] && \
      [[ " ${_pkgname[*]} " != *" python-tomli "* ]]; then
      _flag=""
      break
    fi
  done
}

_setuptools_quirk() {
  local \
    _pattern
  _is_setuptools_pkg 
  if [[ "${_flag}" != "" ]]; then
    _msg_info \
      "Detected as setuptools pkg"
    _pattern="$( \
      cat \
        "${_tmpdir}/PKGBUILD" | \
        grep \
          -o \
          'root=[^ ]*terdir[^ ]*')"
    [[ "${_pattern}" != "" ]] && \
      _msg_info \
        "reverting 'terdir' to 'pkgdir' in --root option"
      sed \
        -i \
        "s/${_pattern}/root=\"\${pkgdir}\"/g" \
        "${_tmpdir}/PKGBUILD"
  fi
}

_build_quirk() {
  local \
    _pattern
  _is_build_pkg
  if [[ "${_flag}" == "true" ]]; then
    _msg_info \
      "Using 'pkgdir' instead of 'terdir' in build module's --destdir"
    _pattern="$( \
      cat \
        "${_tmpdir}/PKGBUILD" | \
        grep \
          -o \
          'destdir=[^ ]*terdir[^ ]*')"
    [[ "${_pattern}" != "" ]] && \
      sed \
        -i \
        "s%${_pattern}%destdir=\$pkgdir%g" \
        "${_tmpdir}/PKGBUILD"
  fi
}

_python_quirks() {
  local \
    _build_pattern \
    _flag
  _is_python_pkg
  if [[ "${_flag}" == "true" ]]; then
    _msg_info \
      "detected as python pkg"
    _build_quirk
    _setuptools_quirk
  fi
}

# Termux makepkg
# $@:makepkg args
_termux_makepkg() {
  local \
    _args=() \
    _pypattern
  _args=(
    "$@")
  _tmpdir="$( \
    mktemp \
      -d)"
  cp \
    -a \
    "$(pwd)"/* \
    "${_tmpdir}"
  sed \
    "s/pkgdir/terdir/g" \
    "$(pwd)/PKGBUILD" > \
    "${_tmpdir}/PKGBUILD"
  _python_quirks
  cd \
    "${_tmpdir}"
  _termux_flags
  _flags
  cat \
    'PKGBUILD'
  makepkg \
    "${_args[@]}"
  [[ $? -eq 0 ]] && \
  [[ *".pkg."* != "" ]] && \
    mv \
      *".pkg."* \
      "${OLDPWD}" && \
    rm \
      -rf "${_tmpdir}"
  cd \
    "${OLDPWD}"
}

# Reassign an object variable
# if an override variable is defined;
# otherwise it defaults
# to an input default.
# $1: object
# $2: variable
# $3: default value
_set_override() {
  local \
    _obj="${1}" \
    _var="${2}" \
    _default="${3}"
  if [[ -v "override_${_obj}_${_var}" ]]; then
    _set \
      "${_obj}" \
      "${_var}" \
      "$( \
        _get \
	  "override_${obj}" \
          "${_var}")"
  elif [[ -z \
	    "$( \
	      _get \
	        "${_obj}" \
                "${_var}")" ]]; then
    _set \
      "${_obj}" \
      "${_var}" \
      "${_default}"
  fi
}

# Re-assign an object variable
# pointing to a path if an override variable
# is defined, otherwise it defaults to an input path
# $1: object
# $2: variable
# $3: value (a path)
_override_path() {
  local \
    _obj="${1}" \
    _var="${2}" \
    _value="${3}" \
    _path
  _path="$( \
    realpath \
      -q -- \
      "${_value}" || \
      true)"
  [[ "${_path}" == "" ]] && \
    _msg_error \
      "${_value} is not a valid path." \
      1
  _set_override \
    "${_obj}" \
    "${_var}" \
    "${_value}"
  _set \
    "${_obj}" \
    "${_var}" \
    "$( \
      realpath -- \
        "$(_get \
	  "${_obj}" \
          "${_var}")")"
}

# Set defaults and, if present, overrides
# from arch-grub command line option parameters
_set_overrides() {
  _set_override \
    "termux" \
    "glibc" \
    "false"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  IFS='' \
    read \
      -r \
      -d '' \
      usage_text << \
        ENDUSAGETEXT || true
usage: $(_get "app" "name") [options] [makepkg options]
  options:
     -g (--glibc)         Whether to build using glibc in
                          Termux environments.
		          Default: '$(_get "termux" "glibc")}'
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  printf \
    '%s\n' \
    "$( \
      _get \
        "usage" \
	"text")"
  exit \
    "${1}"
}

_globals
_global_variables

while \
  getopts \
    'g:glibc:vh?' \
    arg; do
  case \
    "${arg}" in
    g|glibc) override_termux_glibc="true" ;;
    v) override_quiet="n" ;;
    h|?) _usage \
	    0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done

shift \
  $((OPTIND - 1))

_args=(
  "$@"
)

_reallymakepkg \
  "${_args[@]}"
