#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_etc="$( \
  realpath \
    "${_bin}/../etc")"
source \
  "${_lib}/libcrash-bash/crash-bash"

_global_variables() {
  [[ -v LDFLAGS ]] || \
     LDFLAGS=""
  [[ -v CPPFLAGS ]] || \
    CPPFLAGS=""
  [[ -v CFLAGS ]] || \
    CFLAGS=""
  [[ -v CXXFLAGS ]] || \
    CXXFLAGS=""
  if [[ -z "TERMUX_VERSION" ]]; then
    TERMUX_VERSION=""
  fi
  termux_glib=""
  termux_libc=""
  work_dir=""
  pkgver_update=""
  makepkg_args=()
  color=""
  quiet=""
}

_pkgver_update() {
  local \
    _makepkg_opts=()
  _makepkg_opts=(
    -Adf
    --nobuild
    --nocheck
  )
  makepkg \
    "${_makepkg_opts[@]}"
}

# System-independent makepkg
_reallymakepkg() {
  local \
    _update="${1}" \
    _makepkg_opts=() \
    _makepkg_args=()
  shift \
    1
  _makepkg_args=(
    "$@"
  )
  if [[ -v "TERMUX_VERSION" ]]; then
    _termux_makepkg \
      "${_makepkg_args[@]}"
  else
    _makepkg_opts+=(
      --config
        "${_etc}/reallymakepkg/makepkg.gnu.conf"  
    )
    _show_config
    makepkg \
      "${_makepkg_opts[@]}" \
      "${_makepkg_args[@]}"
  fi
  if [[ "${_update}" == true ]]; then
    _pkgver_update
  fi
}

# Apply useful hopefully globally innocuous flags
_flags() {
  local \
    _coreutils_flags=()
  [[ -v gl_cv_host_operating_system ]] || \
    _coreutils_flags+=(
      gl_cv_host_operating_system="$( \
        uname \
	  -o)"
    )
  export \
    "${_coreutils_flags[@]}"
}

_get_cc() {
  command \
    -v \
     $(stat \
         -c="%N" \
         "$( \
           command \
             -v \
               "cc" \
	       "gcc" | \
	     head \
	       -n \
	         1)" | \
       awk \
         '{print $3}' | \
         sed \
           "s%'%%g")
}

_get_usr() {
  dirname \
    "$( \
      dirname \
        "$( \
	  _get_cc)")"
}

_termux_err_flags() {
  local \
    _err_prefix="-Wno-" \
    _err_flags=() \
    _err \
    _cc
  _err_flags=(
    "deprecated-declarations"
    "implicit-function-declaration"
    # "incompatible-pointer-types"
    "int-conversion"
    "language-extension-token"
    # "overflow"
    "register"
    "unused-but-set-variable"
    "unused-const-variable"
  )
  _cc="$( \
    basename \
      "$(_get_cc)")"
  if [[ "${_cc}" == *"gcc"* ]]; then
    _err_prefix="${_err_prefix}" # error-"
  fi
  for _err \
    in "${_err_flags[@]}"; do
    _cflags+=(
      "${_err_prefix}${_err}"
    )
  done
}

_termux_arch_flags() {
  local \
    _arch \
    _os
  _arch="$( \
    uname \
      -m)"
  _os="$( \
    uname \
      -o)"
  if [[ "${_arch}" == \
	"armv7l" ]]; then
    _glibc_flags+=(
      -D__arc__=1
      -D_GNU_SOURCE
    )
  fi
  if [[ "${_arch}" == \
	"arm" ]] || \
     [[ "${_os}" == \
	"Android" ]]; then
    _cflags+=(
      -D__arc__=1
    )
  fi
}

# Sets flags to unsure GLib builds
_termux_glib_flags() {
  local \
    _glib_flags=()
  _glib_flags=(
    "-I$(_get_usr)/usr/include/glib-2.0"
    "-I$(_get_usr)/lib/glib-2.0/include"
    "-I$(_get_usr)/include"
  )
  if [[ "$(_is_glib_pkg)" == \
	"true" ]]; then
    _cflags+=(
      "${_glib_flags[*]}"
    )
  fi
}

# Set bionic flags
_termux_bionic_flags() {
  _ldflags+=(
    -landroid-glob
    -landroid-shmem
    -landroid-execinfo
    -landroid-support
    -landroid-posix-semaphore
    -landroid-spawn
    -landroid-sysv-semaphore
    # These are actually for
    # clang/llvm and tied to how
    # termux has built them
    -fuse-ld=lld
    -rtlib=compiler-rt
    -unwindlib=libunwind
  )
  _cflags+=(
    # Required by GLib
    -D__BIONIC__=1
  )

}

# Tries to guess correct libc
_termux_auto_flags() {
  local \
    _os \
    _libc="bionic"
  _os="$( \
    uname \
      -o)"
  [[ "${_os}" == 'GNU/Linux' ]] && \
    _libc="glibc" 
  _set \
    "termux" \
    "libc" \
    "${_libc}"
  "_termux_$( \
    _get "termux" \
         "libc")_flags"
}

# Set glibc flags
_termux_glibc_flags() {
  _ldflags+=(
    # -L"${_usr}/glibc/lib/libc.a"
    # -L"${_usr}/glibc/lib"
  )
  _cflags+=(
    "${_glibc_flags[@]}"
  ) 
}

# Returns a space-separated string plus added input items
# $1: string
# $@: string items
_add_missing_flags() {
  local \
    _oflags="${1}" \
    _flags=() \
    _flag
  shift
  _flags=(
    "$@"
  )
  for _flag \
    in "${_flags[*]}"; do
    if \
      [[ \
        ! " ${_oflags} " =~ \
          "${_flag}" ]]; then
      _oflags+=("${_flag}")
    fi 
  done
  echo \
    "${_oflags[*]}"
}

# Set C flags for the termux environment
_termux_flags() {
  local \
    _cflags=() \
    _glibc_flags=() \
    _ldflags=()
  _termux_err_flags
  _termux_arch_flags
  # _cppflags+=(
  #   -I"$(_get_usr)/include/libelf.h"
  # )
  _termux_"$( \
    _get \
      "termux" \
      "libc")"_flags
  _termux_glib_flags
  _ldflags+=(
    -lelf
    -fopenmp
    -static-openmp
  )
  LDFLAGS="$( \
    _add_missing_flags \
      "${LDFLAGS}" \
      "${_ldflags[*]}")"
  export \
    CFLAGS+=" ${_cflags[*]}"
    CXXFLAGS+=" ${_cflags[*]}"
}

# Reads a variable from the PKGBUILD
_recipe_get() {
  local \
    _variable="${1}" \
    _pkgbuild
  _pkgbuild="$( \
    _get \
      "work" \
      "dir")/PKGBUILD"
  recipe-get \
    "${_pkgbuild}" \
    "${_variable}"
}

# Roughly determines if a package
# contains a Python package
_is_python_pkg() {
  local \
    _pkg
    _provides=() \
    _pkgname=()
  _flag=""
  _provides=( $( \
    _recipe_get \
      "provides") )
  _pkgname=( $( \
    _recipe_get \
      "pkgname") )
  _msg_info \
    "Packages: ${_pkgname[*]}"
  for _pkg \
    in "${_provides[@]}"; do
    if [[ "${_pkg}" == "python"*"-"* ]]; then
      _flag=true
      break
    fi
  done
  for _pkg \
    in $( \
      _recipe_get \
        "pkgname"); do
    if [[ "${_pkg}" == "python"*"-"* ]]; then
      _flag=true
      break
    fi
  done
}

# Roughly determines whether a package is
# a setuptools package
_is_setuptools_pkg() {
  local \
    _pkgname=() \
    _makedepends=() \
    _it_flag \
    _py2_flag \
    _recipe
  _recipe="$( \
    _get \
      "work" \
      "dir")/PKGBUILD" 
  _pkgname=( $( \
    _recipe_get \
      "pkgname")
  )
  _makedepends=( $( \
    _recipe_get \
      "makedepends")
  )
  _flag="$( \
    cat \
      "${_recipe}" | \
      grep \
        -o \
	'setup.py')" || \
    true
  _py2_flag="$( \
    echo \
      " ${_pkgname[*]} " | \
      grep \
        " python2-" || \
    true)"
  _it_flag="$( \
    echo \
      " ${_pkgname[*]} " | \
      grep \
        " python-setuptools" || \
    true)"
  if [[ "${_py2_flag}" != "" ]]; then
    _flag="${_py2_flag}"
  fi
  if [[ "${_it_flag}" != "" ]]; then
    _flag=""
  fi || \
    true
  _msg=(
    "pkgname"
    "  ${_flag}"
    "triggers"
    "  Python quirk:"
    "    reverting back"
    "      '"'${terdir}'"' to"
    "      '"'${pkgdir}'"'"
  )
}

_is_build_pkg() {
  local \
    _makedepends=() \
    _pkg \
    _pkgname=() \
    _clang16 \
    _no_clang16_msg=() \
    _clang16_msg=() \
    _clang16_url
  _clang16_url="https://github.com/termux/termux-packages/issues/20039"
  _no_clang16_msg=(
    "The package may not build"
    "without installing 'clang-16'"
    "from an user provided repo."
    "Meanwhile that all of this gets"
    "slowly replaced, go complain for"
    "the extra GB to keep on your build machine"
    "here: ${_clang16_url}"
  )
  _clang16_msg=(
    "Using clang-16 to avoid a possible issue"
    "with openmp; see ${_clang16_url}"
  )
  _flag=""
  _makedepends=( $( \
    _recipe_get \
      "makedepends")
  )
  _pkgname=( $( \
    _recipe_get \
      "pkgname")
  )
  for _pkg \
    in "${_makedepends[@]}"; do
    if \
      [[ "${_pkg}" == "python-build" ]] || \
      [[ "${_pkg}" == '${_py}-build' ]]; then
      _clang16="$( \
	command \
	  -v \
	  "clang-16")"
      if [[ "${_clang16}" == "" ]]; then
	_msg_warning \
	  "${_no_clang16_msg[*]}"
      fi
      if [[ "${_clang16}" != "" ]]; then
	_msg_warning \
	  "${_clang16_msg[*]}"
	export \
	  CC="clang-16" \
	  CXX="clang++-16"
      fi
      _flag="true"
      break
    fi
    if \
      [[ "${_pkg}" == "python-setuptools-scm" ]] && \
      [[ " ${_pkgname[*]} " != *" python-jaraco.context "* ]] && \
      [[ " ${_pkgname[*]} " != *" python-tomli "* ]]; then
      _flag=""
      break
    fi || \
      true
  done || \
  true
}

_is_pip_pkg() {
  local \
    _makedepends=() \
    _pkg \
    _pkgname=() \
    _clang16 \
    _no_clang16_msg=() \
    _clang16_msg=() \
    _clang16_url
  _clang16_url="https://github.com/termux/termux-packages/issues/20039"
  _no_clang16_msg=(
    "The package may not build"
    "without installing 'clang-16'"
    "from an user provided repo."
    "Meanwhile that all of this gets"
    "slowly replaced, go complain for"
    "the extra GB to keep on your build machine"
    "here: ${_clang16_url}"
  )
  _clang16_msg=(
    "Using clang-16 to avoid a possible issue"
    "with openmp; see ${_clang16_url}"
  )
  _flag=""
  _makedepends=( $( \
    _recipe_get \
      "makedepends")
  )
  _pkgname=( $( \
    _recipe_get \
      "pkgname")
  )
  for _pkg \
    in "${_makedepends[@]}"; do
    if \
      [[ "${_pkg}" == "python-pip" ]] || \
      [[ "${_pkg}" == '${_py}-pip' ]]; then
      _clang16="$( \
	command \
	  -v \
	  "clang-16")"
      if [[ "${_clang16}" == "" ]]; then
	_msg_warning \
	  "${_no_clang16_msg[*]}"
      fi
      if [[ "${_clang16}" != "" ]]; then
	_msg_warning \
	  "${_clang16_msg[*]}"
	export \
	  CC="clang-16" \
	  CXX="clang++-16"
      fi
      _flag="true"
      break
    fi
    if \
      [[ "${_pkg}" == "python-setuptools-scm" ]] && \
      [[ " ${_pkgname[*]} " != *" python-jaraco.context "* ]] && \
      [[ " ${_pkgname[*]} " != *" python-tomli "* ]]; then
      _flag=""
      break
    fi || \
      true
  done || \
  true
}

_setuptools_quirk() {
  local \
    _pattern \
    _recipe
  _recipe="$( \
    _get \
      "work" \
      "dir")/PKGBUILD"
  _is_setuptools_pkg 
  if [[ "${_flag}" != "" ]]; then
    _msg_info \
      "Detected as setuptools pkg"
    _pattern="$( \
      cat \
        "${_recipe}" | \
        grep \
          -o \
          'root=[^ ]*terdir[^ ]*')"
    if [[ "${_pattern}" != "" ]]; then
      _msg_info \
        "reverting 'terdir' to 'pkgdir' in --root option"
      sed \
        -i \
        "s%${_pattern}%root=\"\${pkgdir}\"%g" \
        "$( \
	  _get \
	    "work" \
	    "dir")/PKGBUILD"
    fi
  fi || \
    true
}

_build_quirk() {
  local \
    _pattern \
    _recipe
  _recipe="$( \
    _get \
      "work" \
      "dir")/PKGBUILD"
  _is_build_pkg
  if [[ "${_flag}" == "true" ]]; then
    _msg_info \
      "Using 'pkgdir' instead of 'terdir' in build module's --destdir"
    _pattern="$( \
      cat \
        "${_recipe}" | \
        grep \
          -o \
          'destdir=[^ ]*terdir[^ ]*')" || \
      true
    if [[ "${_pattern}" != "" ]]; then
      _msg_info \
        "Reverting..."
      sed \
        -i \
        "s%${_pattern}%destdir=\"\${pkgdir}\"%g" \
        "${_recipe}"
    elif [[ "${_pattern}" == "" ]]; then
      _msg_warning \
        "Option 'destdir' not found, check PKGBUILD"
    fi
  elif [[ "${_flag}" != "true" ]]; then
    _msg_info \
      "package is not a python-build package"
  fi
}

_pip_quirk() {
  local \
    _pattern \
    _recipe
  _recipe="$( \
    _get \
      "work" \
      "dir")/PKGBUILD"
  _is_pip_pkg
  if [[ "${_flag}" == "true" ]]; then
    _msg_info \
      "Using 'pkgdir' instead of 'terdir' in pip opt --root"
    _pattern="$( \
      cat \
        "${_recipe}" | \
        grep \
          -o \
          'root=[^ ]*terdir[^ ]*')" || \
      true
    if [[ "${_pattern}" != "" ]]; then
      _msg_info \
        "Reverting..."
      sed \
        -i \
        "s%${_pattern}%root=\"\${pkgdir}\"%g" \
        "${_recipe}"
    elif [[ "${_pattern}" == "" ]]; then
      _msg_warning \
        "Option 'root' not found, check PKGBUILD"
    fi
  elif [[ "${_flag}" != "true" ]]; then
    _msg_info \
      "package is not a python-pip package"
  fi
}

_python_quirks() {
  local \
    _build_pattern \
    _flag
  _is_python_pkg
  if [[ "${_flag}" == "true" ]]; then
    _msg=(
      "detected Python package"
    )
    _msg_info \
      "${_msg[*]}"
    _build_quirk || \
      true
    _setuptools_quirk || \
      true
    _pip_quirk || \
     true
  fi
}

_is_glib_pkg() {
  local \
    _makedepends=() \
    _pkg \
    _pkgname \
    _flag=""
  _makedepends=( $( \
    _recipe_get \
      "makedepends")
  )
  _pkgname=( $( \
    _recipe_get \
      "pkgname")
  )
  for _pkg \
    in "${_makedepends[@]}" \
       "${_pkgname[@]}"; do
    if [[ "${_pkg}" == "glib2" ]]; then
      _flag="true"
      break
    fi
  done
}

_libc_quirks() {
  if \
    [[ \
     "$( \
       _get \
         "termux" \
         "libc")" == "glibc" ]]; then
    _pkgdir='${terdir}/glibc'
  fi
}

_termux_quirks() {
  local \
    _pkgdir='${terdir}' \
    _depends=()
  _depends=( $( \
    _recipe_get \
      "depends")
  )
  if [[ " ${_depends[*]} " != *' inteppacman '* ]]; then
    sed \
      "s%pkgdir%terdir%g" \
      "$(pwd)/PKGBUILD" > \
      "$( \
        _get \
          "work" \
          "dir")/PKGBUILD"
    _libc_quirks
    return
  fi
  _msg_info \
    "Detected Android app build; no edits to 'pkgdir'"
  # echo\
  #   "_terdir=\"${_pkgdir}\"" >> \
  #   "$( \
  #     _get \
  #       "work" \
  #       "dir")/PKGBUILD"
}

# Termux makepkg
# $@:makepkg args
_termux_makepkg() {
  local \
    _makepkg_opts=() \
    _msg=() \
    _makepkg_args=() \
    _work_dir_non_empty
  _makepkg_args=(
    "$@"
  )
  _makepkg_opts+=(
    --config
      "${_etc}/reallymakepkg/makepkg.android.conf"  
  )
  _work_dir_non_empty="$( \
    ls \
      "${work_dir}/" \
      2>/dev/null || \
      true)"
  if [[ "${_work_dir_non_empty}" != "" ]]; then
    _msg=(
      "work directory '${work_dir}'"
      "non-empty"
    )
    _msg_info \
      "${_msg[*]}"
  elif [ ! -d "${work_dir}" ]; then
    mkdir \
      -p \
      "${work_dir}"
  fi
  cp \
    -af \
    "$( \
      pwd)"/{"","."}* \
    "${work_dir}" 2>/dev/null || \
    true
  _libc_quirks
  _termux_quirks
  _python_quirks
  cd \
    "${work_dir}"
  _termux_flags
  _flags
  _show_config
  _msg=(
    "Running makepkg with options"
    "'${_makepkg_opts[*]} ${_makepkg_args[*]}'"
  )
  _msg_info \
    "${_msg[*]}"
  if [[ "${quiet}" == "n" ]]; then
    makepkg \
      "${_makepkg_opts[@]}" \
      "${_makepkg_args[@]}"
  elif [[ "${quiet}" == "y" ]]; then
    makepkg \
      "${_makepkg_opts[@]}" \
      "${_makepkg_args[@]}" \
      1>/dev/null \
      2>/dev/null
  fi
  if [[ $? -eq 0 ]] && \
     [[ "$(ls "./")"*".pkg."* != "" ]]; then
    mv \
      *".pkg."* \
      "${OLDPWD}"
    rm \
      -rf \
      "${work_dir}"
  fi
  cd \
    "${OLDPWD}"
}

# Set defaults and, if present, overrides
# from arch-grub command line option parameters
_set_overrides() {
  _set_override \
    "work" \
    "dir" \
    "$( \
      mktemp \
        -d)"
  _set_override \
    "termux" \
    "libc" \
    "auto"
  _set_override \
    "termux" \
    "glib" \
    "false"
  _set_override \
    "pkgver" \
    "update" \
    "n"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  IFS='' \
    read \
      -r \
      -d '' \
      usage_text << \
        ENDUSAGETEXT || true
usage: $(_get "app" "name") [options] [makepkg options]
  options:
     -w                   Builds the package in a
                          specific directory instead
			  than in a temporary one.
     -g                   C library to use in
                          Termux environments
			  ('glibc', 'bionic').
		          Default: '$(_get "termux" "libc")'

     -h                   This message.
     -c                   Enable colors
     -v                   Enable verbose output
ENDUSAGETEXT
  printf \
    '%s\n' \
    "$( \
      _get \
        "usage" \
	"text")"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      ${1}
    )
  for _flag \
    in "${_flags[@]}"; do
  _msg_info "                              ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  local \
    build_date \
    _pygmentize_opts=()
  _pygmentize_opts=(
    -l bash
    -O style=emacs,linenos=1
  )
  TZ=UTC \
    printf \
      -v build_date \
      '%(%FT%R%z)T' \
      "${SOURCE_DATE_EPOCH}"
  _msg_info "${app_name} configuration settings"
  _msg_info "           Work directory:   ${work_dir}"
  _msg_info "                     libc:   ${termux_libc}"
  _msg_info "                     arch:   $(uname -m)"
  _msg_info "                       os:   $(uname -o)"
  _msg_info "                       cc:   $(_get_cc)"
  _msg_info "                 CPPFLAGS:   "
  _display_flags                          "${CPPFLAGS}"
  _msg_info "                   CFLAGS:   "
  _display_flags                          "${CFLAGS}"
  _msg_info "                 CXXFLAGS:   "
  _display_flags                          "${CXXFLAGS}"
  _msg_info "                  LDFLAGS:   "
  _display_flags                          "${LDFLAGS}"
  _msg_info "        Makepkg arguments:   "
  _display_flags                          "${makepkg_args[*]}"
  _msg_info ""
  _msg_info "      PKGBUILD:"
  _msg_info ""
  # _msg_info \
  #   "$( \
  #     cat \
  #       'PKGBUILD')"
}

_globals
_global_variables

while \
  getopts \
    'w:g:ucvh?' \
    arg; do
  case \
    "${arg}" in
    w) override_work_dir="${OPTARG}" ;;
    g) override_termux_libc="${OPTARG}" ;;
    u) override_pkgver_update="y" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _usage \
	   1 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
makepkg_args=(
  "$@"
)
_set_overrides
app_opts=(
  "${pkgver_update}"
  "${makepkg_args[@]}"
)
_reallymakepkg \
  "${app_opts[@]}"
