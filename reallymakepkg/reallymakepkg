#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

# System-independent makepkg
_reallymakepkg() {
  local \
    _args=()
  _args=(
    "$@")
  [[ -n "${TERMUX_VERSION}" ]] && \
    _termux_makepkg \
      "${_args[@]}" && \
    return
  makepkg \
    "${_args[@]}"
}

# Apply useful hopefully globally innocuous flags
_flags() {
  local \
    _coreutils_flags=()
  [[ -n "${gl_cv_host_operating_system}" ]] && \
    _coreutils_flags+=(
      gl_cv_host_operating_system="$( \
        uname \
	  -o)"
    )
  export \
    "${_coreutils_flags[@]}"
}

# Set C flags for the termux environment
_termux_flags() {
  local \
    _cc="" \
    _cflags=() \
    _err_flags=() \
    _glib_flags=() \
    _ldflags=() \
    _err \
    _usr
  _cc="$( \
    command \
      -v \
      "$( \
        stat \
         -c="%N" \
         "$( \
           command \
             -v \
             "cc")" | \
         awk \
           '{print $3}')")"
  _usr="$( \
    dirname \
      "$( \
        dirname \
          "${_cc}")")"
  _err_prefix="-Wno-"
  [[ "${_cc}" == *"gcc" ]] && \
    _err_prefix="${_err_prefix}error-"
  _err_flags=(
    "implicit-function-declaration"
    "language-extension-token"
    # "incompatible-pointer-types"
    # "overflow"
  )
  for _err \
    in "${_err_flags[@]}"; do
    _cflags+=(
      "${_err_prefix}${_err}"
    )
  done
  _ldflags=(
    -landroid-shmem
    -landroid-execinfo
    -landroid-support
  )
  _glib_flags=(
    -D__BIONIC__=1
    "-I${_usr}/include/glib-2.0"
    "-I${_usr}/lib/glib-2.0/include"
    "-I${_usr}/include"
  )
  if [[ \
    ! " ${LDFLAGS} " =~ \
      "${_ldflags[*]}" ]] then
    export \
      LDFLAGS="${LDFLAGS} ${_ldflags[*]}"
  fi 
  export \
    CFLAGS="${_glib_flags[*]} ${_cflags[*]} ${CFLAGS}"
    CXXFLAGS="${_glib_flags[*]} ${_cflags[*]} ${CXXFLAGS}"
  echo "CFLAGS; ${CFLAGS}"
}

# Roughly determine if a package contains a Python package
_is_python_pkg() {
  local \
    _pkgname=() \
    _provides=() \
    _pkg
  _flag=""
  _pkgname=(
    $(source \
        "${_tmpdir}/PKGBUILD" && \
      echo \
        "${pkgname[@]}"))
  for _pkg \
    in "${_pkgname[@]}"; do
    if [[ "${_pkg}" == "python"*"-"* ]]; then
      _flag=true
      break
    fi
  done
  _provides=(
    $(source \
        "${_tmpdir}/PKGBUILD" && \
      echo \
        "${provides[@]}"))
  for _pkg \
    in "${_provides[@]}"; do
    if [[ "${_pkg}" == "python"*"-"* ]]; then
      _flag=true
      break
    fi
  done
}

_is_setuptools_pkg() {
  local \
    _pkgname=() \
    _it_flag \
    _py2_flag
  _pkgname=(
    $(source \
        "${_tmpdir}/PKGBUILD" && \
      echo \
        "${pkgname[@]}"))
  _flag="$( \
    cat \
      "${_tmpdir}/PKGBUILD" | \
      grep \
        -o \
	'setup.py')"
  _py2_flag="$( \
    echo \
      " ${_pkgname[*]} " | \
      grep \
        " python2-" )"
  _it_flag="$( \
    echo \
      " ${_pkgname[*]} " | \
      grep \
        " python-setuptools" )"
  if \
    [[ "${_py2_flag}" != "" ]]; then
    _flag=""
  fi
  # if \
  #   [[ "${_it_flag}" != "" ]]; then
  #   _flag=""
  # fi

}

_is_build_pkg() {
  local \
    _makedepends=() \
    _pkg \
  _flag=""
  _makedepends=(
    $(source \
        "${_tmpdir}/PKGBUILD" && \
      echo \
        "${makedepends[@]}"))
  for _pkg \
    in "${_makedepends[@]}"; do
    if [[ "${_pkg}" == "python-build" ]]; then
      _flag="true"
      break
    fi
    if \
      [[ "${_pkg}" == "python-setuptools-scm" ]] && \
      [[ "${_pkg}" != "python-jaraco.context" ]]; then
      _flag=""
      break
    fi
  done
}

_setuptools_quirk() {
  local \
    _pattern
  _is_setuptools_pkg 
  if [[ "${_flag}" != "" ]]; then
    echo \
      "INFO: detected as setuptools pkg"
    _pattern="$( \
      cat \
        "${_tmpdir}/PKGBUILD" | \
        grep \
          -o \
          'root=[^ ]*terdir[^ ]*')"
    [[ "${_pattern}" != "" ]] && \
      echo \
        "INFO: reverting terdir to pkgdir in --root option"
      sed \
        -i \
        "s/${_pattern}/root=\"\${pkgdir}\"/g" \
        "${_tmpdir}/PKGBUILD"
  fi
}

_build_quirk() {
  local \
    _pattern
  _is_build_pkg
  if [[ "${_flag}" == "true" ]]; then
    echo \
      "INFO: Using / instead of terdir in build module's --destdir"
    _pattern="$( \
      cat \
        "${_tmpdir}/PKGBUILD" | \
        grep \
          -o \
          'destdir=[^ ]*terdir[^ ]*')"
    [[ "${_pattern}" != "" ]] && \
      sed \
        -i \
        "s%${_pattern}%destdir=\$pkgdir%g" \
        "${_tmpdir}/PKGBUILD"
  fi
}

_python_quirks() {
  local \
    _build_pattern \
    _flag
  _is_python_pkg
  if [[ "${_flag}" == "true" ]]; then
    echo \
      "INFO: detected as python pkg"
    _build_quirk
    _setuptools_quirk
  fi
}

# Termux makepkg
# $@:makepkg args
_termux_makepkg() {
  local \
    _args=() \
    _pypattern
  _args=(
    "$@")
  _tmpdir="$( \
    mktemp \
      -d)"
  cp \
    -a \
    "$(pwd)"/* \
    "${_tmpdir}"
  sed \
    "s/pkgdir/terdir/g" \
    "$(pwd)/PKGBUILD" > \
    "${_tmpdir}/PKGBUILD"
  _python_quirks
  cd \
    "${_tmpdir}"
  _termux_flags
  _flags
  cat \
    'PKGBUILD'
  makepkg \
    "${_args[@]}"
  [[ $? -eq 0 ]] && \
  [[ *".pkg."* != "" ]] && \
    mv \
      *".pkg."* \
      "${OLDPWD}" && \
    rm \
      -rf "${_tmpdir}"
  cd \
    "${OLDPWD}"
}

_args=(
  "$@")

_reallymakepkg \
  "${_args[@]}"
